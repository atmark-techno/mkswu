## genkey.sh

Generate a private/public key pair to use for rsa pss signing of files.
generated files:
 - swupdate.key is the private signing key that should be kept private.
 - swupdate.pem should be installed to /etc/swupdate.pem and is used
for verification of sw-description and container images if side-loaded.

Note that encryption does not use this key.


## mkimage.sh

Helper to generate swupdate image.

Configurable options (shell format):

PRIVKEY: path to key for signing
PRIVKEY_PASS: passphrase for private key, see openssl(1) "Pass Phrase
              Options" for examples (e.g. file:pathname)
ENCRYPT_KEYFILE: encrypt input files if set, generated if does not exist
                 on first use
UBOOT_SIZE: pad uboot image with zeros up to this size (clear env)
            set to blank to keep original file size.
EXTRA_EXECS: versioned list of commands to execute through the swupdate
             exec handler, specifying both filename and command.
	     The format is lines of "component version path -- command"
	     path cannot contain the ' -- ' litteral.
	     As for other EXTRA_* variables, this must use extra_os
	     if writting to the rootfs is required.
EMBED_CONTAINERS: versioned list of podman archives.
                  Same "component version archive_path" format, and
                  will only be installed if the component is upgraded
USB_CONTAINERS: Same, except files are not included in swu.
                USB containers are signed and must be copied along with .sig
                to USB drive root
PULL_CONTAINERS: Same, except archive is replaced by an URL to pull from.


Glossary:

<component> and <version>:
  We define arbitrary components for swupdate to only install update
  if required.
  - Updates are installed only if version is higher than what is on
    the system, or if not present on the system, except for "uboot"
    and "kernel" which are installed if different
  - Components can be defined freely for updates referring to
    containers (container image or files within volumes);
    if an update writes to rootfs then it must be named "base_os"
    (in which case OS is wiped first) or "extra_os"/"kernel" (in
    which case the OS is copied over first)


Images are then built by calling the following helpers:

swdesc_uboot <uboot> [<version>]
  Include uboot file, version is automatically set from file if not set

swdesc_tar <tar file> <component> <version> [<path>]
  Extract <tar file> at <path> within new system.
  Destination path must be within /var/app/volumes (or volumes_persistent)
  unless rootfs is targeted (see <component> in Glossary), and defaults
  to / for os variants and /var/app/volumes otherwise

swdesc_files <name> <component> <version> <path> <file> [<more files>]
  Copy files directly into <path> (no subdirectory are kept)
  <name> is an arbitrary name (cannot reuse the same name twice)

swdesc_script <script> <component> <version>
  Run script at the end of the install (use exec for pre script)

## podman_partial_image.sh

Generate image file from tags or image ids.
If a base image/tag is given, remove objects from image file that
were used in base image.


## examples

Sample config files, try from git root:
 ./mkimage.sh -o foo.swu examples/foo.conf

read each .conf file for their requirements (files to pre-create)
all examples expect keys to have been generated before (./genkey.sh),
in default path, and public key must be installed on device to use.


## tests

conf files in the test directory will use internal variables to
disable part or all the scripts, allowing to test specific components
of the system.
Please do not rely on these and ask for supporting features you need!

#!/bin/sh

CONF_DIR=/etc/atmark/containers

[ -z "${CONTAINERS_CONF+x}" ] && \
	[ -e /etc/atmark/containers.conf ] && \
	export CONTAINERS_CONF=/etc/atmark/containers.conf
[ -z "${CONTAINERS_STORAGE_CONF+x}" ] && \
	[ -e /etc/atmark/containers_storage.conf ] && \
	export CONTAINERS_STORAGE_CONF=/etc/atmark/containers_storage.conf
[ -z "${REGISTRIES_CONFIG_PATH+x}" ] && \
	[ -e /etc/atmark/containers_registries.conf ] && \
	export REGISTRIES_CONFIG_PATH=/etc/atmark/containers_registries.conf

error() {
	echo "$@" >&2
	exit 1
}

usage() {
	echo "Usage: $0 [-a|container [container...]]"
	echo
	echo "Helper to update containers"
	echo
	echo "  -a    Update all configured containers"
	echo "  -l    Instead of normal internet updates, use podman load to"
	echo "        install update from stdin"
}

update_container() {
	container="$1"

	current_image=$(podman inspect --format "{{.Image}}" "$container") \
		|| error "Could not find container image"
	image_name=$(podman inspect --format "{{.ImageName}}" "$container") \
		|| error "Could not find container image name"

	[ "${image_name%/*}" = "localhost" ] && error "Image must not be local to pull: $image_name"

	new_image=$(podman pull -q "$image_name") \
		|| error "Could not pull $image_name"

	if [ "$new_image" = "$current_image" ]; then
		# nothing updated, all clear!
		return
	fi

	podman stop "$container"
	# podman currently has no way of cloning, or modifying a container,
	# so remove it and recreate it from config
	podman rm "$container"
	podman_start "$container"
}

update_containers() {
	for container in "$CONF_DIR/"*.conf; do
		container="${container%.conf}"
		container="${container##*/}"
		update_container "$container"
	done
}

podman_load() {
	podman load
}

[ $# -lt 1 ] && usage && exit 1

case "$1" in
	"-a")
		[ $# -ne 1 ] && error "Trailing arguments after -a"
		update_containers
		exit
		;;
	"-l")
		podman_load
		exit
		;;
	"-h"|"--help")
		usage
		exit 0
		;;
esac

for container; do
	update_container "$@"
done

